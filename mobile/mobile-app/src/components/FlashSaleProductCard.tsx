// CLEAN REWRITE
import React, { useMemo, useState, useRef, useEffect } from 'react';
import { View, Text, Image, StyleSheet, TouchableOpacity, ScrollView, Pressable, Modal, NativeSyntheticEvent, NativeScrollEvent, I18nManager } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { useTranslation } from 'react-i18next';
import api from '../services/api';
import { formatPrice } from '../utils/format';
import { ms } from '../utils/responsive';
import { useCart } from '../context/CartContext';
import { useAuth } from '../context/AuthContext';
import { useWishlist } from '../context/WishlistContext';

export interface FlashSaleProduct { _id: string; name: string; price: number; originalPrice?: number; flashPrice?: number; flashSaleEndsAt?: string; images?: string[]; colors?: { name?: string; images?: string[]; sizes?: { name: string; stock: number }[] }[]; }
function resolveImageUrl(src?: string){ if(!src) return; let s=src.trim(); if(!s) return; s=s.replace(/\\/g,'/'); if(/^https?:\/\//i.test(s)||s.startsWith('data:')) return s; const base=(api.defaults.baseURL||'').replace(/\/$/,''); const lower=s.toLowerCase(); if(lower.startsWith('/api/uploads/')) return base+s; const m=lower.match(/(?:^|\/)(public\/)?uploads\/(.+)$/); if(m) return `${base}/api/uploads/${m[2]}`; if(lower.startsWith('/uploads/')) return `${base}/api${s}`; if(lower.startsWith('uploads/')) return `${base}/api/${s}`; if(!s.startsWith('/')) s='/'+s; return base+s; }
interface Props { product: FlashSaleProduct; width?: number; list?: boolean }
const FlashSaleProductCard: React.FC<Props> = ({ product, width, list }) => {
  const { t } = useTranslation();
  const navigation = useNavigation<any>();
  const { addToCart, cart } = useCart();
  useAuth();
  useWishlist();
  const [open,setOpen]=useState(false); const cardWidth=width||160; const isRTL=I18nManager.isRTL;
  const baseImages=useMemo(()=> product.images?.length?product.images: (product.colors?.[0]?.images||[]) , [product.images, product.colors]);
  const images=useMemo(()=> baseImages.map(i=>resolveImageUrl(i)!).filter(Boolean) as string[], [baseImages]);
  const imageCount=images.length; const [carouselWidth,setCarouselWidth]=useState(cardWidth); const scrollRef=useRef<ScrollView|null>(null); const dragging=useRef(false); const dragTimer=useRef<NodeJS.Timeout|null>(null);
  const hasDiscount= typeof product.flashPrice==='number' && (product.originalPrice||product.price) > product.flashPrice!; const displayPrice= typeof product.flashPrice==='number'? product.flashPrice!: product.price; const baseOrig= product.originalPrice||product.price; const pct= hasDiscount? Math.round(((baseOrig-displayPrice)/baseOrig)*100):0; const inCartQty = cart.find(c=>c.productId===product._id)?.quantity||0;
  const navigate=()=>{ if(dragging.current) return; navigation.navigate('ProductDetails',{ productId: product._id }); };
  const [colorIdx,setColorIdx]=useState(0); const [showLarge,setShowLarge]=useState(false); const [size,setSize]=useState<string|null>(null); const color= product.colors?.[Math.min(colorIdx, (product.colors.length||1)-1)]; const sizeOptions=useMemo(()=> (color?.sizes||[]).filter(s=> (s.stock??0)>0),[color]); useEffect(()=>{ if(open){ setColorIdx(0); setSize(null);} },[open]);
  const sheetImages=useMemo(()=>{ const ci=(color?.images||[]).map(resolveImageUrl).filter(Boolean) as string[]; return (ci.length?ci:images).slice(0,4); },[color,images]);
  const [now,setNow]=useState(Date.now()); useEffect(()=>{ if(!open|| !product.flashSaleEndsAt) return; const id=setInterval(()=> setNow(Date.now()),1000); return()=> clearInterval(id); },[open, product.flashSaleEndsAt]);
  const remaining=useMemo(()=>{ if(!product.flashSaleEndsAt) return null; const end=new Date(product.flashSaleEndsAt).getTime(); const diff=Math.max(end-now,0); if(diff<=0) return '00:00:00'; const h=Math.floor(diff/3600000); const m=Math.floor((diff%3600000)/60000); const s=Math.floor((diff%60000)/1000); return [h,m,s].map(n=>String(n).padStart(2,'0')).join(':'); },[now, product.flashSaleEndsAt]);
  // Removed lightning PNG asset dependency; using solid color backgrounds instead.
  const Grid=(<Pressable style={[styles.card,{ width:cardWidth }]} onPress={navigate}><View style={styles.imageWrap} onLayout={e=>{const w=Math.round(e.nativeEvent.layout.width); if(w&&w!==carouselWidth) setCarouselWidth(w);}}>{imageCount? <ScrollView ref={r=>{scrollRef.current=r;}} horizontal pagingEnabled showsHorizontalScrollIndicator={false} scrollEventThrottle={16} onScrollBeginDrag={()=>{dragging.current=true; if(dragTimer.current) clearTimeout(dragTimer.current);}} onMomentumScrollEnd={(e:NativeSyntheticEvent<NativeScrollEvent>)=>{ const idx=Math.round(e.nativeEvent.contentOffset.x/carouselWidth); dragTimer.current=setTimeout(()=>{dragging.current=false;},120);}}>{images.map((u,i)=><Image key={u+i} source={{uri:u}} style={[styles.image,{width:carouselWidth}]} />)}</ScrollView>: <View style={[styles.image,{backgroundColor:'#f3f4f6'}]} />}</View><Text style={[styles.name,isRTL&&{textAlign:'right'}]} numberOfLines={2}>{product.name}</Text><View style={styles.flashPriceBar}><View style={{flex:1}}><Text style={styles.flashPrice}>{formatPrice(displayPrice)}</Text>{hasDiscount&&<Text style={styles.flashOrig}>{formatPrice(baseOrig)}</Text>}</View>{hasDiscount&&<View style={styles.discountWrap}><Text style={styles.discountText}>-{pct}%</Text></View>}<TouchableOpacity style={styles.cartBtn} onPress={()=>setOpen(true)}><Ionicons name="cart-outline" size={18} color="#FF6F00" /><Ionicons name="add" size={10} color="#FF6F00" style={{position:'absolute', top:-4, right:-4}} />{inCartQty>0&&<View style={styles.cartQty}><Text style={styles.cartQtyText}>{inCartQty}</Text></View>}</TouchableOpacity></View></Pressable>);
  const List=(<Pressable style={styles.listCard} onPress={navigate}><View style={styles.listLeft}><View style={styles.listMainImageWrap}>{images[0]? <Image source={{uri:images[0]}} style={styles.listMainImage} />:<View style={[styles.listMainImage,{backgroundColor:'#f3f4f6'}]} />}</View><View style={styles.listThumbsCol}>{images.slice(1,5).map((u,i)=><Image key={u+i} source={{uri:u}} style={styles.listThumb} />)}{images.length<=1 && <View style={[styles.listThumb,{backgroundColor:'#f3f4f6'}]} />}</View></View><View style={styles.listRight}><Text style={styles.listName} numberOfLines={2}>{product.name}</Text><View style={styles.ratingRow}>{Array.from({length:5}).map((_,i)=><Ionicons key={i} name="star" size={14} color="#FFC107" style={{marginRight:2}} />)}<Text style={styles.ratingCount}>(1000+)</Text></View><View style={styles.listPriceBar}><View style={{flex:1}}><Text style={styles.listPrice}>{formatPrice(displayPrice)}</Text>{hasDiscount&&<Text style={styles.listOrig}>{formatPrice(baseOrig)}</Text>}</View>{hasDiscount&&<View style={styles.listDiscountWrap}><Text style={styles.listDiscountText}>-{pct}%</Text></View>}<TouchableOpacity style={styles.listCartBtn} onPress={()=>setOpen(true)}><Ionicons name="cart-outline" size={18} color="#FF6F00" /></TouchableOpacity></View></View></Pressable>);
  return (<>{list? List: Grid}<Modal visible={open} transparent animationType="fade" onRequestClose={()=>setOpen(false)}><TouchableOpacity style={styles.sheetBackdrop} activeOpacity={1} onPress={()=>setOpen(false)} /><View style={styles.sheet}><View style={styles.sheetHeader}><TouchableOpacity onPress={()=>setOpen(false)} style={styles.closeBtn}><Ionicons name="close" size={22} color="#111" /></TouchableOpacity></View><ScrollView contentContainerStyle={styles.sheetScroll} showsVerticalScrollIndicator={false}><ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={{gap:10,paddingHorizontal:16,marginBottom:12}}>{sheetImages.map((u,i)=><Image key={u+i} source={{uri:u}} style={styles.sheetImage} />)}</ScrollView>{hasDiscount&&<View style={styles.flashSheetBar}><View style={styles.flashSheetTopRow}><View style={{flexDirection:'row',alignItems:'center'}}><Ionicons name="flash" size={14} color="#111" style={{marginRight:4}} /><Text style={styles.flashSheetLabel}>{t('flashSale.title','Flash Sale')}</Text></View>{remaining&&<View style={styles.flashTimerRow}><Ionicons name="time-outline" size={14} color="#111" style={{marginRight:4}} /><Text style={styles.flashTimerText}>{remaining}</Text></View>}</View><View style={styles.flashSheetPriceRow}><Text style={styles.flashSheetPrice}>{formatPrice(displayPrice)}</Text><Text style={styles.flashSheetStrike}>{formatPrice(baseOrig)}</Text><Text style={styles.flashSheetDiscount}>-{pct}%</Text></View></View>}<Text style={styles.sheetTitle} numberOfLines={2}>{product.name}</Text>{product.colors?.length? <View style={{marginTop:10}}><View style={styles.colorHeaderRow}><Text style={styles.colorHeaderText}>{t('common.color')}: <Text style={styles.colorValue}>{color?.name||'â€”'}</Text></Text><TouchableOpacity onPress={()=>setShowLarge(p=>!p)} style={styles.largeImageToggle}><Ionicons name={showLarge?'grid-outline':'images-outline'} size={16} color="#0B57D0" /><Text style={styles.largeImageToggleText}>{showLarge? t('common.compact','Compact'): t('common.largeImage','Large Image')}</Text></TouchableOpacity></View>{showLarge? <View style={{paddingHorizontal:16,flexDirection:'row',flexWrap:'wrap',gap:12,marginTop:8}}>{product.colors.map((c,idx)=>{const thumb=resolveImageUrl(c.images?.[0]||images[0]); const active=idx===colorIdx; const isHot=(c as any).isHot||idx===0; return (<TouchableOpacity key={(c.name||'c')+idx} onPress={()=>{setColorIdx(idx); setSize(null);}} style={[styles.largeColorWrap, active&&styles.largeColorWrapActive]}>{thumb? <Image source={{uri:thumb}} style={styles.largeColorImage} />: <View style={[styles.largeColorImage,{backgroundColor:'#f3f4f6'}]} />}{isHot&&<View style={styles.hotBadge}><Text style={styles.hotBadgeText}>HOT</Text></View>}</TouchableOpacity>);})}</View>: <ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={{gap:10,paddingVertical:8}} style={{paddingHorizontal:16}}>{product.colors.map((c,idx)=>{const thumb=resolveImageUrl(c.images?.[0]||images[0]); const active=idx===colorIdx; const isHot=(c as any).isHot||idx===0; return (<TouchableOpacity key={(c.name||'c')+idx} onPress={()=>{setColorIdx(idx); setSize(null);}}><View>{thumb? <Image source={{uri:thumb}} style={[styles.colorThumb, active&&styles.colorThumbActive]} />: <View style={[styles.colorThumb,active&&styles.colorThumbActive,{backgroundColor:'#f3f4f6'}]} />}{isHot&&<View style={styles.hotBadgeSmall}><Text style={styles.hotBadgeTextSmall}>HOT</Text></View>}</View></TouchableOpacity>);})}</ScrollView>}</View>: null}{sizeOptions.length>0 && <View style={{paddingHorizontal:16, marginTop:10}}><Text style={styles.sectionLabel}>{t('common.size')}</Text><View style={{flexDirection:'row',flexWrap:'wrap',gap:10,marginTop:8}}>{sizeOptions.map(s=>{const active=size===s.name; return (<TouchableOpacity key={s.name} onPress={()=>setSize(s.name)} style={[styles.sizeChip, active&&styles.sizeChipActive]}><Text style={[styles.sizeChipText, active&&styles.sizeChipTextActive]}>{s.name}</Text></TouchableOpacity>);})}</View></View>}</ScrollView><View style={styles.sheetFooter}><TouchableOpacity accessibilityLabel={t('common.addToCart')} onPress={()=>{ const colorName=color?.name; const sizeName=size||undefined; const sizeObj=(color?.sizes||[]).find(s=>s.name===size); if((color?.sizes?.length)&&(!sizeObj||sizeObj.stock<=0)) return; const thumb=resolveImageUrl(color?.images?.[0]||images[0]); addToCart({ productId:product._id, name:product.name, price:displayPrice, quantity:1, originalPrice:baseOrig, flashPrice: hasDiscount? displayPrice: undefined, flashEndsAt: product.flashSaleEndsAt, ...(colorName?{color:colorName}:{}) , ...(sizeName?{size:sizeName}:{}) , ...(thumb?{image:thumb}:{}) }); setOpen(false); }} disabled={!!(sizeOptions.length>0 && !size)} style={[styles.addToCartBtn, (sizeOptions.length>0 && !size)&&styles.addToCartDisabled]}><Text style={styles.addToCartText}>{t('common.addToCart')}</Text></TouchableOpacity></View></View></Modal></>);
};
const styles=StyleSheet.create({ card:{marginBottom:16}, imageWrap:{borderRadius:12, overflow:'hidden', backgroundColor:'#f2f2f2'}, image:{height:180}, name:{marginTop:6,fontSize:ms(14),fontWeight:'600',color:'#222'}, flashPriceBar:{flexDirection:'row',alignItems:'center',backgroundColor:'#FFF8E1',borderRadius:8,paddingHorizontal:8,paddingVertical:6,marginTop:6}, flashPrice:{fontSize:ms(16),fontWeight:'700',color:'#C75100'}, flashOrig:{fontSize:ms(12),textDecorationLine:'line-through',color:'#A66',marginTop:-2}, discountWrap:{width:72,height:44,justifyContent:'center',alignItems:'center',marginHorizontal:4}, discountImg:{position:'absolute',top:0,left:0,right:0,bottom:0,width:'100%',height:'100%'}, discountText:{color:'#fff',fontSize:13,fontWeight:'800'}, cartBtn:{width:40,height:40,backgroundColor:'#FFE0B2',borderRadius:10,alignItems:'center',justifyContent:'center',marginLeft:4}, cartQty:{position:'absolute',top:-4,left:-4,backgroundColor:'#d32f2f',paddingHorizontal:5,paddingVertical:2,borderRadius:10}, cartQtyText:{color:'#fff',fontSize:10,fontWeight:'700'}, sheetBackdrop:{flex:1,backgroundColor:'rgba(0,0,0,0.35)'}, sheet:{position:'absolute',left:0,right:0,bottom:0,backgroundColor:'#fff',borderTopLeftRadius:16,borderTopRightRadius:16,maxHeight:'80%'}, sheetHeader:{paddingTop:8,paddingBottom:4,alignItems:'flex-end',paddingHorizontal:8}, closeBtn:{width:36,height:36,borderRadius:18,alignItems:'center',justifyContent:'center',backgroundColor:'#f3f4f6'}, sheetScroll:{paddingBottom:40}, sheetImage:{width:74,height:74,borderRadius:8,backgroundColor:'#f3f4f6'}, sheetTitle:{fontSize:ms(16),fontWeight:'600',paddingHorizontal:16,marginBottom:6,color:'#111'}, sectionLabel:{fontSize:ms(13),fontWeight:'600',color:'#111',paddingHorizontal:16}, colorThumb:{width:54,height:54,borderRadius:8,backgroundColor:'#f3f4f6'}, colorThumbActive:{borderWidth:2,borderColor:'#111'}, sizeChip:{borderWidth:1,borderColor:'#d1d5db',paddingHorizontal:14,paddingVertical:8,borderRadius:8,backgroundColor:'#fff'}, sizeChipActive:{backgroundColor:'#111',borderColor:'#111'}, sizeChipText:{fontSize:ms(13),fontWeight:'600',color:'#111'}, sizeChipTextActive:{color:'#fff'}, sheetFooter:{paddingHorizontal:16,paddingVertical:16,borderTopWidth:StyleSheet.hairlineWidth,borderColor:'#e5e7eb'}, addToCartBtn:{height:52,borderRadius:4,backgroundColor:'#F9D426',alignItems:'center',justifyContent:'center'}, addToCartDisabled:{opacity:0.5}, addToCartText:{color:'#111',fontSize:ms(16),fontWeight:'700'}, colorHeaderRow:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',paddingHorizontal:16}, colorHeaderText:{fontSize:ms(14),fontWeight:'700',color:'#111'}, colorValue:{fontWeight:'700'}, largeImageToggle:{flexDirection:'row',alignItems:'center',gap:4}, largeImageToggleText:{color:'#0B57D0',fontSize:ms(12),fontWeight:'600',marginLeft:4}, largeColorWrap:{width:90,height:110,borderRadius:10,backgroundColor:'#f3f4f6',overflow:'hidden',position:'relative'}, largeColorWrapActive:{borderWidth:2,borderColor:'#111'}, largeColorImage:{width:'100%',height:'100%'}, hotBadge:{position:'absolute',top:6,left:6,backgroundColor:'#ff5722',paddingHorizontal:6,paddingVertical:2,borderRadius:4}, hotBadgeText:{color:'#fff',fontSize:10,fontWeight:'700'}, hotBadgeSmall:{position:'absolute',top:4,left:4,backgroundColor:'#ff5722',paddingHorizontal:4,paddingVertical:1,borderRadius:4}, hotBadgeTextSmall:{color:'#fff',fontSize:8,fontWeight:'700'}, flashSheetBar:{backgroundColor:'#FFF8E1',borderRadius:8,marginHorizontal:16,marginBottom:10,paddingVertical:6,paddingHorizontal:10}, flashSheetTopRow:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',marginBottom:4}, flashSheetLabel:{fontSize:12,fontWeight:'700',color:'#111'}, flashTimerRow:{flexDirection:'row',alignItems:'center'}, flashTimerText:{fontSize:12,fontWeight:'600',color:'#111'}, flashSheetPriceRow:{flexDirection:'row',alignItems:'flex-end',gap:8}, flashSheetPrice:{fontSize:ms(20),fontWeight:'700',color:'#C75100'}, flashSheetStrike:{fontSize:12,textDecorationLine:'line-through',color:'#A66',marginBottom:2}, flashSheetDiscount:{fontSize:11,fontWeight:'700',color:'#dc2626',backgroundColor:'#FFE5D7',paddingHorizontal:6,paddingVertical:2,borderRadius:4}, listCard:{flexDirection:'row',padding:8,marginBottom:16}, listLeft:{flexDirection:'row'}, listMainImageWrap:{borderRadius:8,overflow:'hidden'}, listMainImage:{width:90,height:120}, listThumbsCol:{marginLeft:6,justifyContent:'space-between'}, listThumb:{width:46,height:26,borderRadius:4,backgroundColor:'#f3f4f6'}, listRight:{flex:1,marginLeft:12,justifyContent:'space-between'}, listName:{fontSize:ms(14),fontWeight:'600',color:'#222',marginBottom:4}, ratingRow:{flexDirection:'row',alignItems:'center',marginBottom:8}, ratingCount:{fontSize:12,color:'#555',marginLeft:4}, listPriceBar:{flexDirection:'row',alignItems:'center',backgroundColor:'#FFF8E1',borderRadius:14,paddingHorizontal:10,paddingVertical:8,marginTop:4}, listPrice:{fontSize:ms(16),fontWeight:'700',color:'#C75100'}, listOrig:{fontSize:10,color:'#A66',textDecorationLine:'line-through',marginTop:2}, listDiscountWrap:{width:60,height:40,marginHorizontal:4,justifyContent:'center',alignItems:'center'}, listDiscountImg:{position:'absolute',top:0,left:0,right:0,bottom:0,width:'100%',height:'100%'}, listDiscountText:{color:'#fff',fontSize:12,fontWeight:'800'}, listCartBtn:{width:40,height:40,borderRadius:10,backgroundColor:'#FFE0B2',alignItems:'center',justifyContent:'center',marginLeft:4} });
export default FlashSaleProductCard;
